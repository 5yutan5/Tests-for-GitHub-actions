---
name: 'Setup Poetry environment'
description: >-
  This action allows setting up Python and Poetry, installing dependencies,
  and caching dependencies and Poetry all at once.
author: 'Yunosuke Ohsugi'
branding:
  icon: 'code'
  color: 'green'

inputs:
  python-version:
    description: 'Wrapper around `version` input of actions/setup-python.'
  python-version-file:
    description: 'Wrapper around `version-file` input of actions/setup-python.'
  python-architecture:
    description: 'Wrapper around `architecture` input of actions/setup-python.'
  python-check-latest:
    description: 'Wrapper around `check-latest` input of actions/setup-python.'
    default: 'false'
  token:
    description: 'Wrapper around `token` input of actions/setup-python.'
    default: |
      ${{ github.server_url == 'https://github.com' && github.token || '' }}
  python-cache-dependency-path:
    description: |
      'Wrapper around `cache-dependency-path` input of actions/setup-python.'
    default: '**/poetry.lock'
  python-update-environment:
    description: |
      'Wrapper around `update-environment` input of actions/setup-python.'
    default: 'true'

  poetry-version:
    description: 'The Poetry version to install.'
  poetry-installer-max-workers:
    description: 'Wrapper around Poetry setting `installer.max-workers`.'
  poetry-installer-parallel:
    description: 'Wrapper around Poetry setting `installer.parallel`.'
    default: 'true'
  poetry-pypi-token:
    description: 'Wrapper around Poetry setting `pypi-token`.'
  poetry-virtualenvs-create:
    description: 'Wrapper around Poetry setting `virtualenvs.create`.'
    default: 'true'
  poetry-virtualenvs-in-project:
    description: 'Wrapper around Poetry setting `virtualenvs.in-project`.'
  poetry-virtualenvs-path:
    description: 'Wrapper around Poetry setting `virtualenvs-path`.'

  python-cache-dependencies:
    description: 'Whether to cache installed dependencies.'
    default: 'true'
  poetry-install-dependencies:
    description: |
      'Whether Poetry should install dependencies after completing all setup.'
    default: 'true'
  poetry-install-arguments:
    description: 'Arguments passed directly to the `poetry install` command.'

outputs:
  python-version:
    description: |
      'Wrapper around `python-version` output of actions/setup-python.'
    value: ${{ steps.setup-python.outputs.python-version }}
  python-cache-hit:
    description: 'Wrapper around `cache-hit` output of actions/setup-python.'
    value: ${{ steps.setup-python.outputs.cache-hit }}
  python-path:
    description: 'Wrapper around `python-path` output of actions/setup-python.'
    value: ${{ steps.setup-python.outputs.python-path }}

runs:
  using: 'composite'
  steps:
    - name: Get the version of each tool used for poetry
      id: poetry-tool-versions
      run: |
        echo python=$(python3 -V) >> $GITHUB_OUTPUT
        echo pipx=$(pipx --version) >> $GITHUB_OUTPUT
      shell: bash

    - name: Get Poetry installation location
      id: pipx-dirs
      run: |
        if [ "${{ runner.os }}" == "Windows" ]; then
          BIN_PATH="$(pipx environment --value PIPX_BIN_DIR)\poetry.exe"
        else
          BIN_PATH="$(pipx environment --value PIPX_BIN_DIR)/poetry"
        fi
        echo bin=$BIN_PATH >> $GITHUB_OUTPUT
        echo venv=$(pipx environment --value PIPX_HOME)/venvs/poetry \
          >> $GITHUB_OUTPUT
      shell: bash

    - name: Restore and cache Poetry installation
      uses: actions/cache@v3
      id: poetry-cache
      with:
        path: |
          ${{ steps.pipx-dirs.outputs.venv }}
          ${{ steps.pipx-dirs.outputs.bin }}.7z
        key: "\
          setup_poetry_env-${{ runner.os }}-\
          ${{ steps.poetry-tool-versions.outputs.python }}-\
          pipx_${{ steps.poetry-tool-versions.outputs.pipx }}"

    - name: Extract Poetry bin
      if: >-
        ${{ steps.poetry-cache.outputs.cache-hit }} == 'true' &&
        ${{ runner.os }} == 'Windows'
      run: |
        7z x ${{ steps.pipx-dirs.outputs.bin }}.7z
        pipx environment --value PIPX_BIN_DIR
      shell: bash

    - name: Install Poetry with pipx
      if: ${{ steps.poetry-cache.outputs.cache-hit }} != 'true'
      run: |
        if [ -z "${{ inputs.poetry-version }}" ]; then
          pipx install poetry
        else
          pipx install poetry==${{ inputs.poetry-version }}
        fi
      shell: bash

    - run: |
        poetry -V
        poetry config cache-dir
      shell: bash

    - name: Configure Poetry
      run: |
        if [ -n "${{ inputs.poetry-installer-max-workers }}" ]; then
          poetry config installer.max-workers \
            ${{ inputs.poetry-installer-max-workers }}
        fi
        if [ "${{ inputs.poetry-installer-parallel }}" == "false" ]; then
          poetry config installer.parallel false
        fi
        if [ -n "${{ inputs.poetry-pypi-token }}" ]; then
          poetry config pypi-token ${{ inputs.poetry-pypi-token }}
        fi
        if [ "${{ inputs.poetry-virtualenvs-create }}" == "false" ]; then
          poetry config virtualenvs.create false
        fi
        if [ "${{ inputs.poetry-virtualenvs-in-project }}" == "true" ]; then
          poetry config virtualenvs.in-project true
        fi
        if [ "${{ inputs.poetry-virtualenvs-in-project }}" == "false" ]; then
          poetry config virtualenvs.in-project false
        fi
        if [ -n "${{ inputs.poetry-virtualenvs-path }}" ]; then
          poetry config virtualenvs.path ${{ inputs.poetry-virtualenvs-path }}
        fi
      shell: bash

    - name: Create additional dependency file
      if: ${{ inputs.poetry-install-dependencies-arguments }}
      run: |
        echo ${{ github.action_path }}/temp-key.txt
        echo ${{ inputs.poetry-install-dependencies-arguments }} > \
        ${{ github.action_path }}/temp-key.txt
      shell: bash

    - name: Update python-cache-dependency-path
      id: cache-dependency-path
      run: |
        if [ -z "${{ inputs.poetry-install-dependencies-arguments }}"]; then
          echo path=${{ inputs.python-cache-dependency-path }} >> $GITHUB_OUTPUT
        else
          dependency_paths = ${{ inputs.python-cache-dependency-path }}
          dependency_paths += "\n"${{ github.action_path }}/temp-key.txt
          echo path=$dependency_paths >> $GITHUB_OUTPUT
        fi
      shell: bash

    - name: Check whether to cache
      id: cache
      if: ${{ inputs.python-cache-dependencies }} == 'true'
      run: echo id="poetry" >> $GITHUB_OUTPUT
      shell: bash

    - uses: actions/setup-python@v4
      id: setup-python
      with:
        cache: ${{ steps.cache.outputs.id }}
        python-version: ${{ inputs.python-version }}
        python-version-file: ${{ inputs.python-version-file}}
        architecture: ${{ inputs.python-architecture }}
        check-latest: ${{ inputs.python-check-latest }}
        token: ${{ inputs.token }}
        cache-dependency-path: ${{ steps.cache-dependency-path.outputs.path }}
        update-environment: ${{ inputs.python-update-environment }}

    - name: Install Python dependencies
      if: >-
        ${{ inputs.poetry-install-dependencies }} &&
        ${{ steps.setup-python.outputs.cache-hit }} != 'true'
      run: poetry install ${{ inputs.poetry-install-dependencies-arguments }}
      env:
        # Poetry log will be corrupted on Windows.
        # Changing the encoding to utf-8 fixes this problem.
        PYTHONIOENCODING: 'utf-8'
      shell: bash

    - name: Compress poetry bin
      if: ${{ runner.os }} == 'Windows'
      run: |
        7z a ${{ steps.pipx-dirs.outputs.bin }}.7z \
          ${{ steps.pipx-dirs.outputs.bin }}
      shell: bash
